#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}

\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Section
Projeto do sistema
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
Depois da análise orientada a objeto desenvolve-se o projeto do sistema,
 qual envolve etapas como a definição dos protocolos, da interface API,
 o uso de recursos, a subdivisão do sistema em subsistemas, a alocação dos
 subsistemas ao hardware e a seleção das estruturas de controle, a seleção
 das plataformas do sistema, das biblitoecas externas, dos padrões de projeto,
 além da tomada de decisões conceituais e políticas que formam a infraestrutura
 do projeto.
\end_layout

\begin_layout Standard
Deve-se definir padrões de documentação, padrões para o nome das classes,
 padrões de retorno e de parâmetros em métodos, características da interface
 do usuário e características de desempenho.
 
\end_layout

\begin_layout Standard
Segundo 
\begin_inset CommandInset citation
LatexCommand cite
key "prog-UML-Rumbaugh,prog-UML-blaha"

\end_inset

, o projeto do sistema é a estratégia de alto nível para resolver o problema
 e elaborar uma solução.
 Você deve se preocupar com itens como: 
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Definição dos protocolos de comunicação entre os diversos elementos externos
 
\begin_inset Newline newline
\end_inset

(como dispositivos).
 Por exemplo: se o sistema envolve o uso dos nós de um cluster, devem ser
 considerados aspectos como o protocolo de comunicação entre os nós do cluster
\end_layout

\begin_layout Itemize
Definição dos protocolos de comunicação entre os diversos elementos internos
 
\begin_inset Newline newline
\end_inset

(como objetos).
 
\end_layout

\begin_layout Itemize
Definição da interface API de suas bibliotecas e sistemas (veja a seção
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Interface-API"

\end_inset

).
\end_layout

\begin_layout Itemize
Definição do formato dos arquivos gerados pelo programa.
 Por exemplo: prefira formatos abertos, como arquivos txt e xml.
\end_layout

\begin_deeper
\begin_layout Itemize
neste projeto o programa terá como entrada arquivos de extensão .dat.
 Serão gerados arquivos com extensão .dat e .jpeg.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação e alocação dos recursos globais, como os recursos do sistema
 serão alocados, utilizados, compartilhados e liberados.
 Implicam modificações no diagrama de componentes (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Diagrama-de-componentes"

\end_inset

).
\end_layout

\begin_layout Itemize
Identificação da necessidade do uso de banco de dados.
 Implicam em modificações nos diagramas de atividades e de componentes.
\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto não há necessidade da criação de um banco de dados.
 Os arquivos gerados serão salvo emum diretório pré-determinado pelo usuário.
\end_layout

\end_deeper
\begin_layout Itemize
Identificação da necessidade de sistemas de armazenamento de massa.
 Por exemplo: um 
\emph on
storage
\emph default
 em um sistema de cluster ou sistemas de backup.
\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto os arquivos gerados terão serão irão requerer pouco espaço
 para armazenamento.
 Todos os arquivos poderão ser salvo no próprio computador utilizado para
 executar o programa.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação e seleção da implementação de controle, seqüencial ou concorrente,
 baseado em procedimentos ou eventos (veja Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Introdução-ao-Uso-de-cluster"

\end_inset

 - Introdução à Utilização de 
\emph on
Clusters
\emph default
 de Computadores.).
 Implicam modificações no diagrama de execução (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Diagrama-de-execução"

\end_inset

).
 
\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto o controle será sequencial, baseado em eventos.
\end_layout

\end_deeper
\begin_layout Itemize
Identificação das condições extremas e de prioridades.
\end_layout

\begin_layout Itemize
Identificação da necessidade de otimização.
 Por exemplo: prefira sistemas com grande capacidade de memória; prefira
 vários hds pequenos a um grande.
\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto não ha necessidade de uso de processos de otimização.
 Os cálculos realizados requerem pouco espaço na memória, tanto física,
 quando te processamento.
\end_layout

\end_deeper
\begin_layout Itemize
Identificação e definição de 
\emph on
loops
\emph default
 de controle e das escalas de tempo.
 
\end_layout

\begin_layout Itemize
Identificação de concorrências -- quais algoritmos podem ser implementados
 usando processamento paralelo (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Introdução-ao-Processamento-Paralelo"

\end_inset

).
 
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação das estruturas arquitetônicas comuns.
 
\end_layout

\begin_layout Itemize
Identificação de subsistemas relacionados à plataforma selecionada.
 Podem implicar em modificações no diagrama de pacotes (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:diagrama de assuntos-pacotes"

\end_inset

) e no diagrama de componentes (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Diagrama-de-componentes"

\end_inset

).
 
\end_layout

\begin_layout Itemize
Identificação e definição das plataformas a serem suportadas: hardware,
 sistema operacional e linguagem de programação (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Selecao-da-plataforma-de-programacao"

\end_inset

).
\end_layout

\begin_layout Itemize
Seleção das bibliotecas externas a serem utilizadas (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Selecao-de-bibliotecas-externas"

\end_inset

).
\end_layout

\begin_layout Itemize
Seleção da biblioteca utilizada para montar a interface gráfica do programa
 -- GDI (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Seleção-da-biblioteca-grafica"

\end_inset

).
\end_layout

\begin_layout Itemize
Seleção do ambiente de desenvolvimento para montar a interface de desenvolviment
o -- IDE (veja a seção 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Selecao-da-IDE"

\end_inset

).
 
\end_layout

\end_deeper
\begin_layout Enumerate
Padrões de projeto
\end_layout

\begin_deeper
\begin_layout Itemize
Normalmente os padrões de projeto são identificados e passam a fazer parte
 de uma biblioteca de padrões da empresa.
 Mas isto só ocorre após a realização de diversos projetos.
\end_layout

\end_deeper
\begin_layout Section
Projeto orientado a objeto -- POO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise, mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida
 (hardware, sistema operacional e linguagem de programação).
 Passa pelo maior detalhamento do funcionamento do programa, acrescentando
 atributos e métodos que envolvem a solução de problemas específicos não
 identificados durante a análise.
\end_layout

\begin_layout Standard
Envolve a otimização da estrutura de dados e dos algoritmos, a minimização
 do tempo de execução, de memória e de custos.
 Existe um desvio de ênfase para os conceitos da plataforma selecionada.
 
\end_layout

\begin_layout Standard
Exemplo: na análise você define que existe um método para salvar um arquivo
 em disco, define um atributo nomeDoArquivo, mas não se preocupa com detalhes
 específicos da linguagem.
 Já no projeto, você inclui as bibliotecas necessárias para acesso ao disco,
 cria um objeto específico para acessar o disco, podendo, portanto, acrescentar
 novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "sub:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Adicionar nos diagramas de pacotes as bibliotecas e subsistemas selecionados
 no projeto do sistema (exemplo: a biblioteca gráfica selecionada).
\end_layout

\begin_layout Itemize
Novas classes e associações oriundas das bibliotecas selecionadas e da linguagem
 escolhida devem ser acrescentadas ao modelo.
\end_layout

\begin_layout Itemize
Estabelecer as dependências e restrições associadas à plataforma escolhida.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "sub:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Revisar os diagramas de seqüência e de comunicação considerando a plataforma
 escolhida.
\end_layout

\begin_layout Itemize
Verificar a necessidade de se revisar, ampliar e adicionar novos diagramas
 de máquinas de estado e de atividades.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Atributos novos podem ser adicionados a uma classe, como, por exemplo, atributos
 específicos de uma determinada linguagem de programação (acesso a disco,
 ponteiros, constantes e informações correlacionadas).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Em função da plataforma escolhida, verifique as possíveis alterações nos
 métodos.
 O projeto do sistema costuma afetar os métodos de acesso aos diversos dispositi
vos (exemplo: hd, rede).
\end_layout

\begin_layout Itemize
De maneira geral os métodos devem ser divididos em dois tipos: i) tomada
 de decisões, métodos políticos ou de controle; devem ser claros, legíveis,
 flexíveis e usam polimorfismo.
 ii) realização de processamentos, podem ser otimizados e em alguns casos
 o polimorfismo deve ser evitado.
 
\end_layout

\begin_layout Itemize
Algoritmos complexos podem ser subdivididos.
 Verifique quais métodos podem ser otimizados.
 Pense em utilizar algoritmos prontos como os da STL (algoritmos genéricos).
\end_layout

\begin_layout Itemize
Responda a pergunta: os métodos da classes estão dando resposta às responsabilid
ades da classe?
\end_layout

\begin_layout Itemize
Revise os diagramas de classes, de seqüência e de máquina de estado.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Reorganização das classes e dos métodos (criar métodos genéricos com parâmetros
 que nem sempre são necessários e englobam métodos existentes).
 
\end_layout

\begin_layout Itemize
Abstração do comportamento comum (duas classes podem ter uma superclasse
 em comum).
 
\end_layout

\begin_layout Itemize
Utilização de delegação para compartilhar a implementação (quando você cria
 uma herança irreal para reaproveitar código).
 Usar com cuidado.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Deve-se definir na fase de projeto como as associações serão implementadas,
 se obedecerão um determinado padrão ou não.
 
\end_layout

\begin_layout Itemize
Se existe uma relação de "muitos", pode-se implementar a associação com
 a utilização de um dicionário, que é um mapa das associações entre objetos.
 Assim, o objeto A acessa o dicionário fornecendo uma chave (um nome para
 o objeto que deseja acessar) e o dicionário retorna um valor (um ponteiro)
 para o objeto correto.
 Veja o Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Implementando-Associações"

\end_inset

 -- Implementando Associações em C++.
\end_layout

\begin_layout Itemize
Evite percorrer várias associações para acessar dados de classes distantes.
 Pense em adicionar associações diretas.
\end_layout

\begin_layout Section
Diagrama de componentes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de componentes mostra a forma como os componentes do programa
 se relacionam, suas dependências.
 Inclui itens como: componentes, subsistemas, executáveis, nós, associações,
 dependências, generalizações, restrições e notas.
 Exemplos de componentes são bibliotecas estáticas, bibliotecas dinâmicas,
 dlls, componentes Java, executáveis, arquivos de disco, código-fonte.
 
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-componentes"

\end_inset

 um exemplo de diagrama de componentes.
 Observe que este inclui muitas dependências, ilustrando as relações entre
 os arquivos.
 Por exemplo: o subsistema biblioteca inclui os arquivos das classes A e
 B, e a geração dos objetos A.obj e B.obj depende dos arquivos A.h, A.cpp, B.h
 e B.cpp.
 A geração da biblioteca depende dos arquivos A.obj e B.obj.
 O subsistema biblioteca Qt, um subsistema exerno, inclui os arquivos de
 código da biblioteca Qt e a biblioteca em si.
 O subsistema banco de dados representa o banco de dados utilizado pelo
 sistema e tem uma interface de acesso que é utilizada pelo programa para
 acesso aos dados armazenados no banco de dados.
 O programa executável a ser gerado depende da biblioteca gerada, dos arquivos
 da biblioteca Qt, do módulo de arquivos MinhaJanela e do banco de dados.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Renan/Desktop/Modelo Trabalho (COLOCAR NO DESKTOP PRA FUNCIONAR)/imagens/diagrama_componentes.png
	scale 80
	rotateOrigin center

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Diagrama de componentes.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de implantação
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de implantação é um diagrama de alto nível que inclui relações
 entre o sistema e o hardware e que se preocupa com os aspectos da arquitetura
 computacional escolhida.
 Seu enfoque é o hardware, a configuração dos nós em tempo de execução.
 
\end_layout

\begin_layout Standard
O diagrama de implantação deve incluir os elementos necessários para que
 o sistema seja colocado em funcionamento: computador, periféricos, processadore
s, dispositivos, nós, relacionamentos de dependência, associação, componentes,
 subsistemas, restrições e notas.
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-execução."

\end_inset

 um exemplo de diagrama de implantação de um cluster.
 Observe a presença de um servidor conectado a um switch.
 Os nós do cluster (ou clientes) também estão conectados ao switch.
 Os resultados das simulações são armazenados em um servidor de arquivos
 (
\emph on
storage
\emph default
).
\end_layout

\begin_layout Standard
Pode-se utilizar uma anotação de localização para identificar onde determinado
 componente está residente, por exemplo {localização: sala 3}.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Renan/Desktop/Modelo Trabalho (COLOCAR NO DESKTOP PRA FUNCIONAR)/imagens/diagrama_implantacao.png
	scale 80
	rotateOrigin center

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Diagrama de implantação.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
